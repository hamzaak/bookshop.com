package com.bookshop.productms.api;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;

import javax.activation.MimetypesFileTypeMap;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.tomcat.util.http.fileupload.FileUtils;
import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.bookshop.productms.persistence.model.Product;
import com.bookshop.productms.service.IProductService;
import com.google.common.io.Files;
import com.jlefebure.spring.boot.minio.MinioException;
import com.jlefebure.spring.boot.minio.MinioService;

@RestController
@RequestMapping(value = "/api/products")
public class ProductController {
	
	@Autowired
    private MinioService minioService;
	
	@Autowired
	private IProductService productService;
	
	@GetMapping(value = "/get/all")
	public ResponseEntity<List<Product>> getAll() {
		return ResponseEntity.ok(productService.getAll());
	}
	
	@GetMapping(value = "/get/{id}")
	public ResponseEntity<Product> getProduct(@PathVariable("id") String id) {
		return ResponseEntity.ok(productService.getProduct(id));
	}
	
	@PutMapping(value = "/create")
	public ResponseEntity<Product> createProduct(@RequestBody Product product) {
		return ResponseEntity.ok(productService.createProduct(product));
	}
	
	@PostMapping(value = "/update")
	public ResponseEntity<Product> updateProduct(@RequestBody Product product) {
		return ResponseEntity.ok(productService.updateProduct(product));
	}
	
	@DeleteMapping(value = "/delete/{id}")
	public ResponseEntity<String> deleteProduct(@PathVariable("id") String id) {
		productService.deleteProduct(id);
		return ResponseEntity.ok("Product has been deleted successfully");
	}
	
	@PostMapping(value = "/files")
    public void addAttachement() {
        //Path path = Paths.get(file.getOriginalFilename());
        String url = "https://www.onstagewalton.org/uploads/7/3/8/3/73837057/to-kill-a-mockingbird-poster_1_orig.jpg";
        String fileName = "to-kill-a-mockingbird-poster_1_orig.jpg";
		Path path = Paths.get(fileName);
        
        try {
        	CloseableHttpClient client = HttpClientBuilder.create().build();
        	HttpGet request = new HttpGet(url);
        	HttpResponse response = client.execute(request);
        	HttpEntity entity = response.getEntity();
        	
        	InputStream inputStream = entity.getContent();
        	
        	String filePath = fileName;
        	FileOutputStream fos = new FileOutputStream(filePath);
        	int fileByte;
        	while((fileByte = inputStream.read()) != -1) {
        	    fos.write(fileByte);
        	}
        	fos.flush();
        	fos.close();
        	
        	final File initialFile = new File(filePath);
            final InputStream targetStream = 
              new DataInputStream(new FileInputStream(initialFile));
        	
            MimetypesFileTypeMap mimeTypesMap = new MimetypesFileTypeMap();
            String mimeType = mimeTypesMap.getContentType(fileName);
            
            minioService.upload(path, targetStream,  mimeType);
            
            
        } catch (MinioException e) {
            throw new IllegalStateException("The file cannot be upload on the internal storage. Please retry later", e);
        } catch (IOException e) {
            throw new IllegalStateException("The file cannot be read", e);
        }
    }
}
